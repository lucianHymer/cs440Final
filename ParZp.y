-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParZp where
import AbsZp
import LexZp
import ErrM

}

%name pProgram Program
%name pFunction Function
%name pDecl Decl
%name pListFunction ListFunction
%name pListStm ListStm
%name pListDecl ListDecl
%name pListIdent ListIdent
%name pStm Stm
%name pExp Exp
%name pExp1 Exp1
%name pExp2 Exp2
%name pExp3 Exp3
%name pExp4 Exp4
%name pListExp ListExp
%name pType Type
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  '+' { PT _ (TS _ 4) }
  ',' { PT _ (TS _ 5) }
  '-' { PT _ (TS _ 6) }
  ';' { PT _ (TS _ 7) }
  '<' { PT _ (TS _ 8) }
  '=' { PT _ (TS _ 9) }
  '>' { PT _ (TS _ 10) }
  'double' { PT _ (TS _ 11) }
  'else' { PT _ (TS _ 12) }
  'for' { PT _ (TS _ 13) }
  'if' { PT _ (TS _ 14) }
  'int' { PT _ (TS _ 15) }
  'repeat' { PT _ (TS _ 16) }
  'return' { PT _ (TS _ 17) }
  'then' { PT _ (TS _ 18) }
  'until' { PT _ (TS _ 19) }
  'while' { PT _ (TS _ 20) }
  '{' { PT _ (TS _ 21) }
  '}' { PT _ (TS _ 22) }

L_ident  { PT _ (TV $$) }
L_quoted { PT _ (TL $$) }
L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
String  :: { String }  : L_quoted {  $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }

Program :: { Program }
Program : ListFunction { AbsZp.Prog (reverse $1) }
Function :: { Function }
Function : Type Ident '(' ListDecl ')' '{' ListStm '}' { AbsZp.Fun $1 $2 $4 (reverse $7) }
Decl :: { Decl }
Decl : Type ListIdent { AbsZp.Dec $1 $2 }
ListFunction :: { [Function] }
ListFunction : {- empty -} { [] }
             | ListFunction Function { flip (:) $1 $2 }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] } | ListStm Stm { flip (:) $1 $2 }
ListDecl :: { [Decl] }
ListDecl : {- empty -} { [] }
         | Decl { (:[]) $1 }
         | Decl ',' ListDecl { (:) $1 $3 }
ListIdent :: { [Ident] }
ListIdent : Ident { (:[]) $1 } | Ident ',' ListIdent { (:) $1 $3 }
Stm :: { Stm }
Stm : Decl ';' { AbsZp.SDecl $1 }
    | Exp ';' { AbsZp.SExp $1 }
    | '{' ListStm '}' { AbsZp.SBlock (reverse $2) }
    | 'while' '(' Exp ')' Stm { AbsZp.SWhile $3 $5 }
    | 'repeat' Stm 'until' '(' Exp ')' { AbsZp.SRepeat $2 $5 }
    | 'if' '(' Exp ')' Stm { AbsZp.SIf $3 $5 }
    | 'if' '(' Exp ')' 'then' Stm 'else' Stm { AbsZp.SIfThenElse $3 $6 $8 }
    | 'if' '(' Exp ')' 'then' Stm { AbsZp.SIfThen $3 $6 }
    | 'for' '(' Exp ';' Exp ';' Exp ')' Stm { AbsZp.SFor $3 $5 $7 $9 }
    | 'return' Exp ';' { AbsZp.SReturn $2 }
Exp :: { Exp }
Exp : Ident '=' Exp { AbsZp.EAss $1 $3 } | Exp1 { $1 }
Exp1 :: { Exp }
Exp1 : Exp2 '<' Exp2 { AbsZp.ELt $1 $3 }
     | Exp2 '>' Exp2 { AbsZp.EGt $1 $3 }
     | Exp2 { $1 }
Exp2 :: { Exp }
Exp2 : Exp2 '+' Exp3 { AbsZp.EAdd $1 $3 }
     | Exp2 '-' Exp3 { AbsZp.ESub $1 $3 }
     | Exp3 { $1 }
Exp3 :: { Exp }
Exp3 : Exp3 '*' Exp4 { AbsZp.EMul $1 $3 } | Exp4 { $1 }
Exp4 :: { Exp }
Exp4 : Ident '(' ListExp ')' { AbsZp.Call $1 $3 }
     | Ident { AbsZp.EVar $1 }
     | String { AbsZp.EStr $1 }
     | Integer { AbsZp.EInt $1 }
     | Double { AbsZp.EDouble $1 }
     | '(' Exp ')' { $2 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
Type :: { Type }
Type : 'int' { AbsZp.TInt } | 'double' { AbsZp.TDouble }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

