AUTHORS:
Lucian Hymer
Jack Kerby

DESCRIPTION:
This is a compiler for the z-plus language. This is only a demo, demonstrating
the function of if/then/else, getn(), and basic for-loops.

USAGE:
  # Build both the compiler and pstack:
  bnfc -cpp_stl -m ./zp.cf
  make
  make -f Makefile.codegen

  # Compile fib.cmm, producing fib.apm:
  ./compiler fib.cmm fib.apm

  # Disassemble fib.apm:
  ./pstack/apd fib
  # Execute fib.apm:
  ./pstack/api fib

  # Test with (note that this script
  # is modified from the original)
  ./test.sh myTESTS

BUILT-IN-FUNCTIONS:
  The cmm standard library contains these functions:

  exit()       : ends the program immediately
  puts("...")  : prints a string (only literal strings are supported)
  putn(int)    : prints an integer (like printf("\t%d\n", int))
  putd(double) : prints a double (like printf("\t%d\n", double))
  getnum()     : gets an integer
  itod(int)    : returns int as a double
  dtoi(double) : returns double as an integer

All functions return a value.

IMPLEMENTED-FEATURES:
1.  getnum()                       : implemented
2.  if-then and if-then-else       : implemented
3.  for loop (simple)              : implemented
4.  repeat-until                   : implemented
5.  optimizations                  : implemented
6.  globals                        : implemented
7.  for loop (scoped)              : implemented
8.  check function argument counts : implemented
9.  doubles and type checking      : implemented
10. extra features                 : see below

EXTRA-FEATURES:
itod and dtoi      : Built-in functions to type-cast between ints and doubles
multiple arguments : Functions work with multiple arguments
